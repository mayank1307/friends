{"version":3,"sources":["components/card.js","components/cardlist.js","components/search.js","components/scroll.js","containers/app.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","Cardlist","fans","Arrayc","map","users","i","key","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","this","filterfans","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAceA,EAZF,SAAC,GAAoB,EAAnBC,GAAoB,IAAjBC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACtB,OACC,yBAAKC,UAAU,iDACd,yBAAKC,IAAK,OAAOC,IAAG,+BAA0BJ,KAC9C,6BACC,4BAAKA,GACL,2BAAIC,MCIOI,EAVE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAASD,EAAKE,IAAI,SAACC,EAAMC,GAC9B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAKI,GAAGX,GAAIC,KAAMM,EAAKI,GAAGV,KAAMC,MAAOK,EAAKI,GAAGT,UAEzE,OACC,6BACEM,ICMWK,EAZG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKZ,UAAU,OACf,2BACIA,UAAU,iDACVa,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCAPI,G,MAPA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DJ,EAAMK,YCwCJC,E,YAtCX,aAAc,IAAD,8BACT,+CAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACf,YAAcc,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACTzB,KAAO,GACPO,YAAc,IAJT,E,iFAQO,IAAD,OACfmB,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAxB,GAAK,OAAE,EAAKmB,SAAS,CAACtB,KAAKG,Q,+BAM5B,IAAD,EACqB2B,KAAKL,MAAvBzB,EADH,EACGA,KAAKO,EADR,EACQA,YACNwB,EAAY/B,EAAKgC,OAAO,SAAAhC,GAC1B,OAAOA,EAAKN,KAAKuC,cAAcC,SAAS3B,EAAY0B,iBAExD,OAAiB,IAAdjC,EAAKmC,OACG,uCAIP,yBAAKvC,UAAU,MACX,4CACA,kBAAC,EAAD,CAAWY,aAAcsB,KAAKV,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,KAAM+B,U,GAhClBK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,gB","file":"static/js/main.9ba8f19f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id,name,email}) => {\n\treturn(\n\t\t<div className='bg-light-yellow dib br3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt ='phot' src={`https://robohash.org/${name}`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card';\nconst Cardlist = ({ fans }) => {\n\tconst Arrayc = fans.map((users,i) => {\n\t\treturn <Card key={i} id={fans[i].id} name={fans[i].name} email={fans[i].email}/>\n\t})\n\treturn(\n\t\t<div>\n\t\t\t{Arrayc}\n\t\t</div>\n\t);\n}\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchfield,searchchange}) =>{\n    return(\n        <div className='pa2'>\n        <input \n            className='bg-lightest-blue dib br3 ma2 grow bw2 shadow-5'\n            type='search'\n            placeholder='search friends'\n            onChange={searchchange}\n        />\n        </div>\n    );\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return(\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n    );\n}\nexport default Scroll;","import React, {Component} from 'react';\nimport Cardlist from '../components/cardlist'\nimport SearchBox from '../components/search';\nimport './app.css';\nimport Scroll from '../components/scroll';\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n            fans : [],\n            searchfield : ''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(users=>this.setState({fans:users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield : event.target.value})\n    }\n    render(){\n        const {fans,searchfield}=this.state;\n        const filterfans =fans.filter(fans =>{\n            return fans.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        if(fans.length===0){\n            return <h1>Loading</h1>\n        }\n        else{\n        return(\n            <div className='tc'>\n                <h1>Friends List</h1>\n                <SearchBox searchchange={this.onSearchChange}/>\n                <Scroll>\n                    <Cardlist fans={filterfans}/>\n                </Scroll>\n            </div>\n        );\n        }\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/app';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}